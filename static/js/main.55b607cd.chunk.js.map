{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","getNewQuote","a","fetch","response","json","data","ok","Error","setState","console","log","content","state","this","className","Card","style","width","maxWidth","Body","id","Title","Text","author","Button","variant","onClick","type","href","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAuDeA,E,kDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,YAZmB,sBAYL,8BAAAC,EAAA,+EAEaC,MAAM,kCAFnB,cAEJC,EAFI,gBAGSA,EAASC,OAHlB,UAGJC,EAHI,OAINF,EAASG,GAJH,sBAIa,IAAIC,MAAMF,GAJvB,OAKV,EAAKG,SAAS,CAAEH,SALN,kDAOVI,QAAQC,IAAR,MACA,EAAKF,SAAS,CACZH,KAAM,CAACM,QAAS,uCATR,0DATZ,EAAKC,MAAQ,CACXP,KAAM,MAJS,E,gEASjBQ,KAAKb,gB,+BAkBG,IACDK,EAAQQ,KAAKD,MAAbP,KACP,OAAIA,EAEF,sBAAKS,UAAU,MAAf,UACA,4DACA,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,MAAOC,SAAU,SAAvC,SACE,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAG,YAAd,UACE,qCACA,cAACL,EAAA,EAAKM,MAAN,CAAYD,GAAG,OAAf,SAAuBf,EAAKM,YAE5B,cAACI,EAAA,EAAKO,KAAN,CAAWF,GAAG,SAAd,SAAwBf,EAAKkB,SAC7B,cAACC,EAAA,EAAD,CAAQJ,GAAG,YAAYK,QAAQ,UAAUC,QAASb,KAAKb,YAAvD,uBACA,mBAAG2B,KAAK,SAASP,GAAG,cAAcQ,KAAK,2BAA0BH,QAAQ,UAAzE,iCAXW,S,GA9BHI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.55b607cd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null\n    };\n  }\n  \n  componentDidMount() {\n    this.getNewQuote();\n  }\n\n  getNewQuote = async () => {\n    try {\n      const response = await fetch(\"https://api.quotable.io/random\");\n      const data = await response.json();\n      if(!response.ok) throw new Error(data);\n      this.setState({ data })\n    } catch (error) {\n      console.log(error);\n      this.setState({\n        data: {content: \"Opps, something went wrong, Linus\"}\n      })\n    }\n  }\n   \n    \n  render() {\n    const {data} = this.state;\n    if(!data) return null\n    return (\n      <div className=\"App\">\n      <h2>Random Quote Machine/React</h2>\n      <Card style={{ width: '90%', maxWidth: \"50rem\" }}>\n        <Card.Body id=\"quote-box\">\n          <blockquote>\n          <Card.Title id=\"text\">{data.content}</Card.Title>\n          </blockquote>\n          <Card.Text id=\"author\">{data.author}</Card.Text>\n          <Button id=\"new-quote\" variant=\"primary\" onClick={this.getNewQuote}>New Quote</Button>\n          <a type=\"button\" id=\"tweet-quote\" href=\"twitter.com/intent/tweet\"variant=\"primary\">Tweet Quote</a>\n        </Card.Body>\n\n      </Card> \n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}